name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Run tests before deployment
  test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test

  # Database migrations
  migrate:
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Supabase CLI
      run: npm install -g supabase

    - name: Create database backup
      run: npm run db:backup
      env:
        NODE_ENV: production
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

    - name: Run database migrations
      run: npm run migrate:prod
      env:
        NODE_ENV: production
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Deploy to Vercel
  deploy:
    runs-on: ubuntu-latest
    needs: [test, migrate]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && needs.migrate.result == 'success'
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Vercel CLI
      run: npm install -g vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: |
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "Deployed to: $DEPLOYMENT_URL"

    - name: Update deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 0,
            state: 'success',
            environment_url: '${{ steps.deploy.outputs.deployment_url }}',
            description: 'Deployment completed successfully'
          });

  # Post-deployment health checks
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'success'
    timeout-minutes: 5

    steps:
    - name: Wait for deployment to be ready
      run: sleep 30

    - name: Health check
      run: |
        HEALTH_URL="${{ needs.deploy.outputs.deployment_url || 'https://your-domain.vercel.app' }}/api/health"
        echo "Checking health at: $HEALTH_URL"
        
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "‚úÖ Health check passed"
            exit 0
          fi
          echo "‚è≥ Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        
        echo "‚ùå Health check failed after 5 attempts"
        exit 1

    - name: API endpoint test
      run: |
        API_URL="${{ needs.deploy.outputs.deployment_url || 'https://your-domain.vercel.app' }}/api/docs/openapi"
        echo "Testing API documentation at: $API_URL"
        
        if curl -f -s "$API_URL" > /dev/null; then
          echo "‚úÖ API documentation accessible"
        else
          echo "‚ùå API documentation not accessible"
          exit 1
        fi

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success' && needs.health-check.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "URL: ${{ needs.deploy.outputs.deployment_url }}"

    - name: Notify failure
      if: needs.deploy.result == 'failure' || needs.health-check.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for more details."
        exit 1

    # Optional: Send Slack notification
    - name: Send Slack notification
      if: always() && secrets.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}